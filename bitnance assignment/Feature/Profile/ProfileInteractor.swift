//
//  ProfileInteractor.swift
//  bitnance assignment
//
//  Created by Wisarut Multhonggad on 5/1/21.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import RxSwift

protocol ProfileBusinessLogic
{
    func fetchNews(imageCellSize: CGSize)
}

protocol ProfileDataStore
{
}

class ProfileInteractor: ProfileBusinessLogic, ProfileDataStore
{
    var presenter: ProfilePresentationLogic?
    var worker = ProfileWorker()
  
    let disposeBag = DisposeBag()
    
    // MARK: Do something
    func fetchNews(imageCellSize: CGSize) {
        worker.getTopHeadlinesNews().subscribe(onSuccess: { (result) in
            
            let profileResult = self.createProfileFrom(listResult: result.articles)
            let newsListResult = self.createNewsList(listResult: result.articles, profile: profileResult)
            let response = Profile.GetNews.Response(profileResult: profileResult, newsResult: newsListResult, imageCellSize: imageCellSize)
            self.presenter?.presentNewsTopHeadlines(response: response, error: nil)
        }, onError: { (error) in
            let response = Profile.GetNews.Response.init(profileResult: nil, newsResult: nil, imageCellSize: imageCellSize)
            self.presenter?.presentNewsTopHeadlines(response: response, error: error)
        }).disposed(by: disposeBag)
    }
}

extension ProfileInteractor {
    fileprivate func createProfileFrom(listResult list: [Articles]?) -> Articles? {
        return list?.first(where: { $0.author != nil && URL(string: $0.author ?? "") == nil })
    }
    
    fileprivate func createNewsList(listResult list: [Articles]?, profile: Articles?) -> [Articles]? {
        if let profile = profile {
            return list?.filter({ $0.author != profile.author })
        }
        return list
    }
}
