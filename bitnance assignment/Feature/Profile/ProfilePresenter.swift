//
//  ProfilePresenter.swift
//  bitnance assignment
//
//  Created by Wisarut Multhonggad on 5/1/21.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ProfilePresentationLogic
{
    func presentNewsTopHeadlines(response: Profile.GetNews.Response, error: Error?)
}

class ProfilePresenter: ProfilePresentationLogic
{
    weak var viewController: ProfileDisplayLogic?
  
    // MARK: Do something
    func presentNewsTopHeadlines(response: Profile.GetNews.Response, error: Error?) {
        let displayProfile = setDisplayProfile(profileResult: response.profileResult)
        let displayNewsList = setDisplayNewsList(newsListResult: response.newsResult)
        var errorCode = 0
        var errorMessage = ""
        if let requestError: NSError = error as NSError? {
            errorCode = requestError.code
            errorMessage = requestError.localizedDescription
        }
        
        var dynamicImageCellHeight: CGFloat = 0
        if displayNewsList.count > 0 {
            let row = ceil(Double(displayNewsList.count) / 3.0)
            let height = (Double(response.imageCellSize.height) + 10.0) * row
            dynamicImageCellHeight = CGFloat(height + 10.0)
        } else {
            dynamicImageCellHeight = 0
        }
        
        let viewModel = Profile.GetNews.ViewModel(errorCode: errorCode,
                                                  errorMessage: errorMessage,
                                                  displayProfile: displayProfile,
                                                  displayNewsList: displayNewsList,
                                                  imageCellSize: response.imageCellSize,
                                                  cellDynamicHeight: dynamicImageCellHeight)
        viewController?.renderPage(viewModel: viewModel)
    }
    
}

extension ProfilePresenter {
    fileprivate func setDisplayProfile(profileResult: Articles?) -> Profile.GetNews.ViewModel.DisplayProfile {
        if let profile = profileResult {
            return Profile.GetNews.ViewModel.DisplayProfile(profileImageURL: URL(string: profile.urlToImage ?? ""),
                                                            fullname: profile.author ?? "",
                                                            profileTypeName: "  Admin   ",
                                                            profileDescription: profile.description ?? "")
        }
        return Profile.GetNews.ViewModel.DisplayProfile(profileImageURL: nil,
                                                        fullname: "",
                                                        profileTypeName: "",
                                                        profileDescription: "")
    }
    
    fileprivate func setDisplayNewsList(newsListResult: [Articles]?) -> [Profile.GetNews.ViewModel.DisplayNews] {
        if let list = newsListResult {
            return list.compactMap { (news) -> Profile.GetNews.ViewModel.DisplayNews in
                return Profile.GetNews.ViewModel.DisplayNews(newsImageURL: URL(string: news.urlToImage ?? ""),
                                                             title: news.title ?? "",
                                                             description: news.description ?? "")
            }
        }
        return []
    }
}
