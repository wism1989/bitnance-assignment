//
//  ProfileViewController.swift
//  bitnance assignment
//
//  Created by Wisarut Multhonggad on 5/1/21.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ProfileDisplayLogic: class
{
    func renderPage(viewModel: Profile.GetNews.ViewModel)
}

class ProfileViewController: BaseViewController, ProfileDisplayLogic
{
  var interactor: ProfileBusinessLogic?
  var router: (NSObjectProtocol & ProfileRoutingLogic & ProfileDataPassing)?

  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = ProfileInteractor()
    let presenter = ProfilePresenter()
    let router = ProfileRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: View lifecycle
  
  override func viewDidLoad()
  {
    super.viewDidLoad()
    registerTableViewCell()
    getInformation()
  }
    
    override func viewDidLayoutSubviews() {
        super.viewDidLayoutSubviews()

        if let headerView = tableView.tableHeaderView {
            let height = headerView.systemLayoutSizeFitting(UIView.layoutFittingCompressedSize).height
            var headerFrame = headerView.frame

            if height != headerFrame.size.height {
                headerFrame.size.height = height
                headerView.frame = headerFrame
                tableView.tableHeaderView = headerView
            }
        }
    }
  
  // MARK: Do something
    @IBOutlet weak var tableView: UITableView!
    
    fileprivate var viewModel: Profile.GetNews.ViewModel?
    fileprivate var profileInfoType: ProfileInfoType = .list
    
    
    //MARK: Output
    func getInformation()
    {
        tableView.isHidden = true
        let calCellSize = (UIScreen.main.bounds.width - 40) / 3
        let imageCellSize = CGSize(width: calCellSize, height: calCellSize)
        interactor?.fetchNews(imageCellSize: imageCellSize)
    }
  
    //MARK: Input
    func renderPage(viewModel: Profile.GetNews.ViewModel) {
        if viewModel.errorCode == 0 {
            tableView.isHidden = false
            self.viewModel = viewModel
            tableView.reloadData()
        } else {
            showAlert(withMessage: viewModel.errorMessage)
        }
    }
    
    //MARK: Private
    fileprivate func registerTableViewCell() {
        tableView.register(ProfileHeaderTableViewCell.nib(), forCellReuseIdentifier: ProfileHeaderTableViewCell.identifier())
        tableView.register(NewsTableViewCell.nib(), forCellReuseIdentifier: NewsTableViewCell.identifier())
        tableView.register(NewsImageTableViewCell.nib(), forCellReuseIdentifier: NewsImageTableViewCell.identifier())
    }
}

extension ProfileViewController: UITableViewDataSource {
    func numberOfSections(in tableView: UITableView) -> Int {
        return 3
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        let sectionType = TableViewSectionType(rawValue: section)
        switch sectionType {
        case .header:
            return 1
        case .content:
            switch profileInfoType {
            case .list:
                if let list = viewModel?.displayNewsList {
                    return list.count
                }
                return 0
            default:
                return 1
            }
        default:
            return 0
        }
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let sectionType = TableViewSectionType(rawValue: indexPath.section)
        switch sectionType {
        case .header:
            let cell = tableView.dequeueReusableCell(withIdentifier: ProfileHeaderTableViewCell.identifier(), for: indexPath) as! ProfileHeaderTableViewCell
            cell.selectionStyle = .none
            if let viewModel = viewModel?.displayProfile {
                cell.settingProfileCell(viewModel: viewModel)
            }
            
            return cell
        case .content:
            switch profileInfoType {
            case .list:
                let cell = tableView.dequeueReusableCell(withIdentifier: NewsTableViewCell.identifier(), for: indexPath) as! NewsTableViewCell
                cell.selectionStyle = .none
                if let viewModel = viewModel?.displayNewsList[indexPath.row] {
                    cell.settingNewsCell(viewModel: viewModel)
                }
                
                return cell
            default:
                let cell = tableView.dequeueReusableCell(withIdentifier: NewsImageTableViewCell.identifier(), for: indexPath) as! NewsImageTableViewCell
                cell.selectionStyle = .none
                if let viewModel = viewModel {
                    cell.settingProfileFeedCell(viewModel: viewModel)
                }
                return cell
            }
        default:
            return UITableViewCell()
        }
    }
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return UITableView.automaticDimension
    }
    
    func tableView(_ tableView: UITableView, viewForHeaderInSection section: Int) -> UIView? {
        let sectionType = TableViewSectionType(rawValue: section)
        switch sectionType {
        case .tab:
            let headerView = ContentSegmentView(frame: CGRect(x: 0,
                                                              y: 0,
                                                              width: tableView.frame.size.width,
                                                              height: 31))
            headerView.delegate = self
        return headerView
        default:
            return nil
        }
    }
    
    func tableView(_ tableView: UITableView, heightForHeaderInSection section: Int) -> CGFloat {
        let sectionType = TableViewSectionType(rawValue: section)
        switch sectionType {
        case .tab:
            return 31
        default:
            return 1
        }
    }
    
    func tableView(_ tableView: UITableView, heightForFooterInSection section: Int) -> CGFloat {
        return 1
    }
}

extension ProfileViewController: UITableViewDelegate {}

extension ProfileViewController: ProfileInfoSectionViewDelegate {
    func profileInfoSelect(infoType: ProfileInfoType) {
        profileInfoType = infoType
        tableView.reloadSections(IndexSet(integer: TableViewSectionType.content.rawValue), with: .none)
    }
}
